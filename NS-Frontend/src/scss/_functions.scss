// reusable functions
@function headings($from: 1, $to: 6) {
  @if $from == $to {
    @return "h#{$from}";
  } @else {
    @return "h#{$from}," + headings($from + 1, $to);
  }
}

@mixin multi-transition($transitions...) {
  $unfoldedTransitions: ();
  @each $transition in $transitions {
    $unfoldedTransitions: append(
      $unfoldedTransitions,
      unfoldTransition($transition),
      comma
    );
  }

  -webkit-transition: $unfoldedTransitions;
  transition: $unfoldedTransitions;
}

@function unfoldTransition($transition) {
  $property: all;
  $duration: 0.2s;
  $easing: null;
  $delay: null;
  $defaultProperties: ($property, $duration, $easing, $delay);

  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i);
    } @else {
      $p: nth($defaultProperties, $i);
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if ($index) {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index, + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}
